{"version":3,"sources":["providers/utils.js","components/common/Modal.jsx","components/modals/LoadModal.jsx","components/modals/AboutModal.jsx","components/Header.jsx","providers/TilesService.js","components/TilesLibrary.jsx","components/TilesView.jsx","components/TilesBuilder.jsx","App.js","index.js"],"names":["debouce","cb","delay","now","performance","lastCall","window","clearTimeout","lastTimerId","setTimeout","saveToHash","obj","location","hash","Buffer","from","JSON","stringify","toString","stateToB64","loadFromHash","maybeHash","data","cleanHash","str","parse","e","indexOf","split","pop","substr","Context","React","createContext","ModalProvider","_ref","children","modalRef","useRef","context","setContext","useState","useEffect","current","createElement","className","Provider","value","ref","Modal","_ref2","onClose","props","modalNode","useContext","ReactDOM","createPortal","onClick","Object","assign","ev","stopPropagation","title","LoadModal","setOpen","onLoadHash","loadInputRef","style","width","maxWidth","type","AboutModal","href","rel","Header","gridSize","onGridSizeChange","onRandomize","onClear","isModalOpen","setIsModalOpen","isAboutModalOpen","setIsAboutModalOpen","htmlFor","id","min","max","defaultValue","onChange","constants","indexToTileXY","i","tileX","tileY","Math","floor","x","y","indexToBgPosition","concat","tileToBgPosition","indexToPosition","arguments","length","undefined","availableTiles","Array","fill","map","_","createTiles","randomize","random","loadStateFromHash","baseGridSize","baseTiles","tiles","TilesLibrary","selectedTile","onSelect","tile","key","backgroundPosition","TilesView","onLeftClick","onRightClick","offsetX","offsetY","handleClick","target","hasAttribute","Number","getAttribute","getTileIdxFromBtnEvent","preventDefault","buttons","onMouseMove","top","left","indexToViewPosition","data-tile-idx","onMouseDown","lastHash","TilesBuilder","setGridSize","setTiles","setSelectedTile","addEventListener","onHashChange","removeEventListener","updateHash","newHash","URL","newURL","handleLoadHash","doUpdate","newGridSize","newTiles","setTile","tileIdx","tileType","newValue","updateGridSize","oldGridSize","oldTiles","save","Map","forEach","coords","set","newIdx","positionToIndex","clear","newSelection","App","rootElement","document","getElementById","render"],"mappings":"kHAAA,kHAAO,MAKMA,EAAUA,CAACC,EAAIC,KAC1B,MAAMC,EAAMC,YAAYD,MACpBH,EAAQK,UAAYF,EAAMH,EAAQK,SAAWH,GAC/CI,OAAOC,aAAaP,EAAQQ,aAG9BR,EAAQK,SAAWF,EACnBH,EAAQQ,YAAcF,OAAOG,WAAW,KACtCR,IACAD,EAAQK,SAAW,EACnBL,EAAQQ,YAAc,MACrBN,IAGQQ,EAAaC,GAChBL,OAAOM,SAASC,KApBAF,IACxBG,EAAOC,KAAKC,KAAKC,UAAUN,IAAMO,SAAS,UAmBXC,CAAWR,GAG/BS,EAAeC,IAC1B,IAAIC,EAAO,KACX,IACE,MAAMT,EAAOU,EAAUF,GAAaf,OAAOM,SAASC,MAvB9BW,EAwBJX,EAAlBS,EAxB6BN,KAAKS,MAAMX,EAAOC,KAAKS,EAAK,WAyBzD,MAAOE,IAzBeF,MA6BxB,OAAOF,GAGIC,EAAYV,IACnBA,IACEA,EAAKc,QAAQ,OACfd,EAAOA,EAAKe,MAAM,KAAKC,OAET,MAAZhB,EAAK,KACPA,EAAOA,EAAKiB,OAAO,KAIhBjB,K,gRCzCT,MAAMkB,EAAUC,IAAMC,gBAEf,SAASC,EAAaC,GAAgB,IAAf,SAAEC,GAAUD,EACxC,MAAME,EAAWC,oBACVC,EAASC,GAAcC,qBAQ9B,OAJAC,oBAAU,KACRF,EAAWH,EAASM,UACnB,IAGDX,IAAAY,cAAA,OAAKC,UAAU,mBACbb,IAAAY,cAACb,EAAQe,SAAQ,CAACC,MAAOR,GAAUH,GACnCJ,IAAAY,cAAA,OAAKI,IAAKX,KAKT,SAASY,EAAKC,GAAmC,IAAlC,QAAEC,EAAO,SAAEf,KAAagB,GAAOF,EACnD,MAAMG,EAAYC,qBAAWvB,GAE7B,OAAOsB,EACHE,IAASC,aACPxB,IAAAY,cAAA,OAAKC,UAAU,gBAAgBY,QAASN,GACtCnB,IAAAY,cAAA,MAAAc,OAAAC,OAAA,CACEd,UAAU,eACVY,QAASG,GAAMA,EAAGC,mBACdT,GAEJpB,IAAAY,cAAA,OAAKC,UAAU,cACbb,IAAAY,cAAA,OAAKC,UAAU,eAAeO,EAAMU,OAAS,IAC7C9B,IAAAY,cAAA,UAAQC,UAAU,YAAYY,QAASN,GAAS,UAIlDnB,IAAAY,cAAA,OAAKC,UAAU,cAAcT,KAGjCiB,GAEF,KC3CS,SAASU,EAAS5B,GAA2B,IAA1B,QAAE6B,EAAO,WAAEC,GAAY9B,EACvD,MAAM+B,EAAe5B,mBAIrB,OACEN,IAAAY,cAACK,EAAK,CACJa,MAAM,UACNX,QAASA,IAAMa,GAAQ,GACvBG,MAAO,CAAEC,MAAO,OAAQC,SAAU,MAElCrC,IAAAY,cAAA,SAAG,yDACHZ,IAAAY,cAAA,SAAO0B,KAAK,OAAOtB,IAAKkB,IACxBlC,IAAAY,cAAA,UAAQC,UAAU,YAAYY,QAVXG,GAAMK,EAAWC,EAAavB,QAAQI,QAUF,SCb9C,SAASwB,EAAUpC,GAAe,IAAd,QAAE6B,GAAS7B,EAC5C,OACEH,IAAAY,cAACK,EAAK,CAACa,MAAM,QAAQX,QAASA,IAAMa,GAAQ,GAAQG,MAAO,CAAEC,MAAO,MAClEpC,IAAAY,cAAA,UAAI,mBACJZ,IAAAY,cAAA,SAAG,kCACHZ,IAAAY,cAAA,SAAG,oBAEDZ,IAAAY,cAAA,KAAG4B,KAAK,oCAAoCC,IAAI,YAAW,qCAEvD,KAGNzC,IAAAY,cAAA,SAAG,cAEDZ,IAAAY,cAAA,KAAG4B,KAAK,8CAA8CC,IAAI,YAAW,eAEjE,KAINzC,IAAAY,cAAA,SAAG,uBACHZ,IAAAY,cAAA,UAAI,QACJZ,IAAAY,cAAA,UACEZ,IAAAY,cAAA,UAAI,8EAIJZ,IAAAY,cAAA,UAAI,iECzBG,SAAS8B,EAAMvC,GAM1B,IAN2B,SAC7BwC,EAAQ,iBACRC,EAAgB,YAChBC,EAAW,QACXC,EAAO,WACPb,GACD9B,EACC,MAAO4C,EAAaC,GAAkBvC,oBAAS,IACxCwC,EAAkBC,GAAuBzC,oBAAS,GAEzD,OACET,IAAAY,cAAA,cACEZ,IAAAY,cAAA,WACEZ,IAAAY,cAAA,QAAMC,UAAU,SAAQ,mBACxBb,IAAAY,cAAA,UAAQa,QAASA,IAAMuB,GAAe,IAAO,WAC7ChD,IAAAY,cAAA,UAAQa,QAASA,IAAMyB,GAAoB,IAAO,UAEpDlD,IAAAY,cAAA,OAAKC,UAAU,WACbb,IAAAY,cAAA,SAAOuC,QAAQ,kBAAiB,cAAYR,GAAiB,OAC7D3C,IAAAY,cAAA,SACEwC,GAAG,iBACHd,KAAK,QACLe,IAAI,IACJC,IAAI,KACJC,aAAcZ,EACda,SAAUZ,IAEZ5C,IAAAY,cAAA,UAAQa,QAASoB,GAAa,aAC9B7C,IAAAY,cAAA,UAAQa,QAASqB,GAAS,UAG3BC,GACC/C,IAAAY,cAACmB,EAAS,CAACC,QAASgB,EAAgBf,WAAYA,IAEjDgB,GAAoBjD,IAAAY,cAAC2B,EAAU,CAACP,QAASkB,K,iBCrCzC,MAAMO,EACA,GADAA,EAEA,EAFAA,EAGA,IAHAA,EAIA,IAGAC,EAAgBC,IAC3B,MAAMC,EAAQD,EAAIF,EACZI,EAAQC,KAAKC,MAAMJ,EAAIF,GAI7B,MAAO,CAAEG,QAAOC,QAAOG,EAHbJ,EAAQH,EAGQQ,EAFhBJ,EAAQJ,IAKPS,EAAoBP,IAC/B,MAAM,MAAEC,EAAK,MAAEC,GAAUH,EAAcC,GACvC,MAAM,GAANQ,OAAWP,GAASH,EAAsB,GAAM,IAAG,MAAAU,OAAMN,GACtDJ,EAAsB,GACvB,IAAG,MAGMW,EAAmBjE,IAAe,IAAd,EAAE6D,EAAC,EAAEC,GAAG9D,EACvC,MAAM,GAANgE,OAAWH,EAAIP,GAAuBA,EAAsB,GAAM,IAAG,MAAAU,OAAMF,EACzER,GACCA,EAAsB,GACvB,IAAG,MAGMY,EAAkB,SAACV,GAAqB,IAAlBhB,EAAQ2B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAC5C,MAAMV,EAAQD,EAAIhB,EACZkB,EAAQC,KAAKC,MAAMJ,EAAIhB,GAC7B,MAAO,CAAEiB,QAAOC,UA0CLY,EAAiB,IAAIC,MAChCjB,EAAsBA,GAErBkB,KAAK,GACLC,IAAI,CAACC,EAAGlB,IAAMD,EAAcC,IAElBmB,EAAc,SAACnC,GAAQ,IAAEoC,IAAST,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAAO,OACpD,IAAII,MAAM/B,EAAWA,GAClBgC,KAAK,GACLC,IAAI,CAACC,EAAGlB,IAAOoB,EAAYjB,KAAKC,MAAsB,GAAhBD,KAAKkB,UAAiB,IAEpDC,EAAoB,WAI3B,IAHJC,EAAYZ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACfa,EAASb,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGQ,EAAYI,GACxB7F,EAASiF,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAET,MAAMlF,EAAOF,YAAaC,GAY1B,OAVEC,GACAA,EAAKqD,UACoB,kBAAlBrD,EAAKqD,UACZrD,EAAK8F,OACL9F,EAAK8F,iBAAiBV,QAEtBQ,EAAe5F,EAAKqD,SACpBwC,EAAY7F,EAAK8F,OAGZ,CACLzC,SAAUuC,EACVE,MAAOD,ICpGI,SAASE,EAAYlF,GAA8B,IAA7B,aAAEmF,EAAY,SAAEC,GAAUpF,EAC7D,OACEH,IAAAY,cAAA,OAAKC,UAAU,iBACbb,IAAAY,cAAA,UAAI,WACHwE,EAAMR,IAAI,CAACY,EAAM7B,IAChB3D,IAAAY,cAAA,OACE6E,IAAK9B,EACL9C,UAAS,QAAAsD,OAAUmB,IAAiB3B,EAAI,WAAa,IACrDlC,QAASA,IAAM8D,EAAS5B,IAExB3D,IAAAY,cAAA,OACEC,UAAU,WACVsB,MAAO,CAAEuD,mBAAoBtB,EAAiBoB,S,MCV3C,SAASG,EAASxF,GAO7B,IAP8B,MAChCiF,EAAK,YACLQ,EAAW,aACXC,EAAY,SACZlD,EAAW,EAAC,QACZmD,EAAU,GAAKnD,EAAQ,QACvBoD,EAAU,GACX5F,EACC,MAAM6F,EAAcpE,IAClB,MAAM+B,EAdqB/B,IAC7BA,EAAGqE,OAAOC,aAAa,iBACnBC,OAAOvE,EAAGqE,OAAOG,aAAa,mBAC7B,EAWOC,CAAuBzE,GAC7B+B,GAAK,IACP/B,EAAG0E,iBACH1E,EAAGC,kBACgB,IAAfD,EAAG2E,QACLX,EAAYjC,GACY,IAAf/B,EAAG2E,SACZV,EAAalC,KAUnB,OACE3D,IAAAY,cAAA,OAAKC,UAAU,aAAa2F,YAPN5E,IAClBA,EAAG2E,SACLP,EAAYpE,KAMXwD,EAAMR,IAAI,CAACY,EAAM7B,KAChB,MAAM,IAAE8C,EAAG,KAAEC,GFGc,SACjC/C,GAII,IAHJhB,EAAQ2B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACXwB,EAAOxB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACVyB,EAAOzB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAEV,MAAM,MAAEV,EAAK,MAAEC,GAAUQ,EAAgBV,EAAGhB,GAE5C,MAAO,CACL+D,KAAK,GAADvC,OAA2B,IAArBP,EAAQC,EAAQ,GAAUiC,EAAO,MAC3CW,IAAI,GAADtC,OAAuB,IAAjBP,EAAQC,GAAckC,EAAO,OEbZY,CACpBhD,EACAhB,EACAmD,EACAC,GAEF,OACE/F,IAAAY,cAAA,OACE6E,IAAK9B,EACL9C,UAAU,OACVsB,MAAO,CACLuD,mBAAoBxB,EAAkBsB,GACtCiB,MACAC,SAGF1G,IAAAY,cAAA,OACEC,UAAU,WACV+F,gBAAejD,EACfkD,YAAab,QC5C3B,MAAQrD,SAAUuC,EAAcE,MAAOD,GAAcF,EAAkB,GAEvE,IAAI6B,EAAW,GAEA,SAASC,IACtB,MAAOpE,EAAUqE,GAAevG,mBAASyE,IAClCE,EAAO6B,GAAYxG,mBAAS0E,IAC5BG,EAAc4B,GAAmBzG,mBAAS,GAEjDC,oBAAU,KACRpC,OAAO6I,iBAAiB,aAAcC,GAC/B,IAAM9I,OAAO+I,oBAAoB,aAAcD,KAMxD,MAAME,EAAa,eAACpJ,EAAKoG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAAG,OAC7BtG,YAAQ,KACN8I,EAAWpI,YAAW,CAAEiE,WAAUyC,WACjClH,IACCkJ,EAAexF,IACnB,MAAM2F,EAAU,IAAIC,IAAI5F,EAAG6F,QAAQ5I,KAAKiB,OAAO,GAC3CgH,IAAaS,IACfT,EAAWS,EACXG,EAAeH,GAAS,KAMtBG,EAAiB,SAAC7I,GAA2B,IAArB8I,IAAQrD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACpC,MAAQ3B,SAAUiF,EAAaxC,MAAOyC,GAAa5C,EACjDtC,EACAyC,EACAvG,GAIFmI,EAAYY,GACZX,EAASY,GACLF,GACFL,EAAW,IAiCTQ,EAAUA,CAACC,EAASC,KACxB,MAAMH,EAAW,IAAIzC,GACrByC,EAASE,GAAWC,EACpBf,EAASY,GAETP,KAKF,OACEtH,IAAAY,cAAA,OAAKC,UAAU,iBACbb,IAAAY,cAAC8B,EAAM,CACLC,SAAUA,EACVV,WAAYyF,EACZ9E,iBA7CuBhB,IAC3B,MAAMqG,EAAW9B,OAAOvE,EAAGqE,OAAOlF,OAC5B8G,EHLoBK,EAACC,EAAaP,EAAaQ,KAEvD,MAAMC,EAAO,IAAIC,IACjBF,EAASG,QAAQ,CAAC/C,EAAM7B,KACtB,MAAM6E,EAASnE,EAAgBV,EAAGwE,GAClCE,EAAKI,IAAID,EAAQhD,KAInB,MAAMqC,EAAW/C,EAAY8C,GAAa,GAU1C,OAPAS,EAAKE,QAAQ,CAAC/C,EAAMgD,KAClB,MAAME,EA9BqB,SAAC9E,EAAOC,GAAK,IAAElB,EAAQ2B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAC,OACxDT,EAAQlB,EAAWiB,EA6BF+E,CAAgBH,EAAO5E,MAAO4E,EAAO3E,MAAO+D,GACvDc,GAAU,GAAKA,EAASb,EAAStD,SACnCsD,EAASa,GAAUlD,KAIhBqC,GGdYK,CAAevF,EAAUsF,EAAU7C,GAGpD4B,EAAYiB,GACZhB,EAASY,GACTP,KAuCIzE,YArCYkC,KAChBkC,EAASnC,EAAYnC,IACrB2E,EAAW,IAoCPxE,QAlCQ8F,KACZ3B,EAASnC,EAAYnC,GAAU,IAC/B2E,EAAW,MAkCTtH,IAAAY,cAACyE,EAAY,CAACC,aAAcA,EAAcC,SA5BzBsD,IACfA,IAAiBvD,GACnB4B,EAAgB2B,MA2BhB7I,IAAAY,cAAC+E,EAAS,CACRP,MAAOA,EACPzC,SAAUA,EACViD,YAhBYmC,GAAWD,EAAQC,EAASzC,GAiBxCO,aAhBakC,GAAWD,EAAQC,EAAS,MC3FlC,SAASe,IACtB,OACE9I,IAAAY,cAAA,OAAKC,UAAU,OACbb,IAAAY,cAACV,EAAa,KACZF,IAAAY,cAACmG,EAAY,QCJrB,MAAMgC,EAAcC,SAASC,eAAe,QAC5C1H,IAAS2H,OAAOlJ,IAAAY,cAACkI,EAAG,MAAKC,K","file":"static/js/main.18f2f08a.chunk.js","sourcesContent":["export const stateToB64 = obj =>\r\n  Buffer.from(JSON.stringify(obj)).toString(\"base64\");\r\n\r\nexport const B64ToState = str => JSON.parse(Buffer.from(str, \"base64\"));\r\n\r\nexport const debouce = (cb, delay) => {\r\n  const now = performance.now();\r\n  if (debouce.lastCall && now - debouce.lastCall < delay) {\r\n    window.clearTimeout(debouce.lastTimerId);\r\n  }\r\n\r\n  debouce.lastCall = now;\r\n  debouce.lastTimerId = window.setTimeout(() => {\r\n    cb();\r\n    debouce.lastCall = 0;\r\n    debouce.lastTimerId = null;\r\n  }, delay);\r\n};\r\n\r\nexport const saveToHash = obj => {\r\n  return (window.location.hash = stateToB64(obj));\r\n};\r\n\r\nexport const loadFromHash = maybeHash => {\r\n  let data = null;\r\n  try {\r\n    const hash = cleanHash(maybeHash || window.location.hash);\r\n    data = B64ToState(hash);\r\n  } catch (e) {\r\n    /* This can safely fail */\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nexport const cleanHash = hash => {\r\n  if (hash) {\r\n    if (hash.indexOf(\"/\")) {\r\n      hash = hash.split(\"/\").pop();\r\n    }\r\n    if (hash[0] === \"#\") {\r\n      hash = hash.substr(1);\r\n    }\r\n  }\r\n\r\n  return hash;\r\n};\r\n","import \"./Modal.css\";\r\nimport React, { useRef, useContext, useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Context = React.createContext();\r\n\r\nexport function ModalProvider({ children }) {\r\n  const modalRef = useRef();\r\n  const [context, setContext] = useState();\r\n\r\n  // make sure re-render is triggered after initial\r\n  // render so that modalRef exists\r\n  useEffect(() => {\r\n    setContext(modalRef.current);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"modal-container\">\r\n      <Context.Provider value={context}>{children}</Context.Provider>\r\n      <div ref={modalRef} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function Modal({ onClose, children, ...props }) {\r\n  const modalNode = useContext(Context);\r\n\r\n  return modalNode\r\n    ? ReactDOM.createPortal(\r\n        <div className=\"modal-overlay\" onClick={onClose}>\r\n          <div\r\n            className=\"modal-dialog\"\r\n            onClick={ev => ev.stopPropagation()}\r\n            {...props}\r\n          >\r\n            <div className=\"modal-head\">\r\n              <div className=\"modal-title\">{props.title || \"\"}</div>\r\n              <button className=\"modal-btn\" onClick={onClose}>\r\n                Close\r\n              </button>\r\n            </div>\r\n            <div className=\"modal-body\">{children}</div>\r\n          </div>\r\n        </div>,\r\n        modalNode\r\n      )\r\n    : null;\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { Modal } from \"components/common/Modal\";\r\n\r\nexport default function LoadModal({ setOpen, onLoadHash }) {\r\n  const loadInputRef = useRef();\r\n\r\n  const handleLoadHash = ev => onLoadHash(loadInputRef.current.value);\r\n\r\n  return (\r\n    <Modal\r\n      title=\"Load...\"\r\n      onClose={() => setOpen(false)}\r\n      style={{ width: \"100%\", maxWidth: 420 }}\r\n    >\r\n      <p>Paste a city hash below to load a previous creation :</p>\r\n      <input type=\"text\" ref={loadInputRef} />\r\n      <button className=\"btn-clear\" onClick={handleLoadHash}>\r\n        Load\r\n      </button>\r\n    </Modal>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { Modal } from \"components/common/Modal\";\n\nexport default function AboutModal({ setOpen }) {\n  return (\n    <Modal title=\"About\" onClose={() => setOpen(false)} style={{ width: 400 }}>\n      <h1>IsoCity Builder</h1>\n      <p>Simple isometric city builder.</p>\n      <p>\n        Inspired from&nbsp;\n        <a href=\"https://victorribeiro.com/isocity\" rel=\"nofollow\">\n          https://victorribeiro.com/isocity\n        </a>\n        .\n      </p>\n      <p>\n        Edit on&nbsp;\n        <a href=\"https://codesandbox.io/s/city-builder-kgghx\" rel=\"nofollow\">\n          CodeSandbox\n        </a>\n        .\n      </p>\n\n      <p>Created with React.</p>\n      <h2>Tips</h2>\n      <ul>\n        <li>\n          Share your creations by sharing your page URL, it is changing as you\n          build\n        </li>\n        <li>You can undo/redo using your browser back/forward functions</li>\n      </ul>\n    </Modal>\n  );\n}\n","import \"./Header.css\";\r\nimport React, { useState } from \"react\";\r\nimport LoadModal from \"components/modals/LoadModal\";\r\nimport AboutModal from \"components/modals/AboutModal\";\r\n\r\nexport default function Header({\r\n  gridSize,\r\n  onGridSizeChange,\r\n  onRandomize,\r\n  onClear,\r\n  onLoadHash\r\n}) {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isAboutModalOpen, setIsAboutModalOpen] = useState(false);\r\n\r\n  return (\r\n    <header>\r\n      <div>\r\n        <span className=\"title\">IsoCity Builder</span>\r\n        <button onClick={() => setIsModalOpen(true)}>Load...</button>\r\n        <button onClick={() => setIsAboutModalOpen(true)}>About</button>\r\n      </div>\r\n      <div className=\"options\">\r\n        <label htmlFor=\"gridsize-input\">Grid Size: {gridSize}</label>&nbsp;\r\n        <input\r\n          id=\"gridsize-input\"\r\n          type=\"range\"\r\n          min=\"1\"\r\n          max=\"16\"\r\n          defaultValue={gridSize}\r\n          onChange={onGridSizeChange}\r\n        />\r\n        <button onClick={onRandomize}>Randomize</button>\r\n        <button onClick={onClear}>Clear</button>\r\n      </div>\r\n\r\n      {isModalOpen && (\r\n        <LoadModal setOpen={setIsModalOpen} onLoadHash={onLoadHash} />\r\n      )}\r\n      {isAboutModalOpen && <AboutModal setOpen={setIsAboutModalOpen} />}\r\n    </header>\r\n  );\r\n}\r\n","import { loadFromHash } from \"./utils\";\r\n\r\nexport const constants = {\r\n  numTilesX: 12,\r\n  numTilesY: 6,\r\n  tileSizeX: 130,\r\n  tileSizeY: 230\r\n};\r\n\r\nexport const indexToTileXY = i => {\r\n  const tileX = i % constants.numTilesX;\r\n  const tileY = Math.floor(i / constants.numTilesX);\r\n  const x = tileX * constants.tileSizeX;\r\n  const y = tileY * constants.tileSizeY;\r\n\r\n  return { tileX, tileY, x, y };\r\n};\r\n\r\nexport const indexToBgPosition = i => {\r\n  const { tileX, tileY } = indexToTileXY(i);\r\n  return `${(tileX / (constants.numTilesX - 1)) * 100}% ${(tileY /\r\n    (constants.numTilesY - 1)) *\r\n    100}%`;\r\n};\r\n\r\nexport const tileToBgPosition = ({ x, y }) => {\r\n  return `${(x / constants.tileSizeX / (constants.numTilesX - 1)) * 100}% ${(y /\r\n    constants.tileSizeY /\r\n    (constants.numTilesY - 1)) *\r\n    100}%`;\r\n};\r\n\r\nexport const indexToPosition = (i, gridSize = 6) => {\r\n  const tileX = i % gridSize;\r\n  const tileY = Math.floor(i / gridSize);\r\n  return { tileX, tileY };\r\n};\r\n\r\nexport const positionToIndex = (tileX, tileY, gridSize = 6) =>\r\n  tileY * gridSize + tileX;\r\n\r\nexport const indexToViewPosition = (\r\n  i,\r\n  gridSize = 6,\r\n  offsetX = 0,\r\n  offsetY = 0\r\n) => {\r\n  const { tileX, tileY } = indexToPosition(i, gridSize);\r\n\r\n  return {\r\n    left: `${(tileX - tileY - 1) * 64 + offsetX}px`,\r\n    top: `${(tileX + tileY) * 32 + offsetY}px`\r\n  };\r\n};\r\n\r\nexport const updateGridSize = (oldGridSize, newGridSize, oldTiles) => {\r\n  // Save tiles along with their grid coordinates\r\n  const save = new Map();\r\n  oldTiles.forEach((tile, i) => {\r\n    const coords = indexToPosition(i, oldGridSize);\r\n    save.set(coords, tile);\r\n  });\r\n\r\n  // Create new empty board\r\n  const newTiles = createTiles(newGridSize, false);\r\n\r\n  // Restore saved tiles, getting their new index from their grid coordinates\r\n  save.forEach((tile, coords) => {\r\n    const newIdx = positionToIndex(coords.tileX, coords.tileY, newGridSize);\r\n    if (newIdx > -1 && newIdx < newTiles.length) {\r\n      newTiles[newIdx] = tile;\r\n    }\r\n  });\r\n\r\n  return newTiles;\r\n};\r\n\r\nexport const availableTiles = new Array(\r\n  constants.numTilesX * constants.numTilesY\r\n)\r\n  .fill(1)\r\n  .map((_, i) => indexToTileXY(i));\r\n\r\nexport const createTiles = (gridSize, randomize = true) =>\r\n  new Array(gridSize * gridSize)\r\n    .fill(0)\r\n    .map((_, i) => (randomize ? Math.floor(Math.random() * 72) : 0));\r\n\r\nexport const loadStateFromHash = (\r\n  baseGridSize = 6,\r\n  baseTiles = createTiles(baseGridSize),\r\n  maybeHash\r\n) => {\r\n  const data = loadFromHash(maybeHash);\r\n  if (\r\n    data &&\r\n    data.gridSize &&\r\n    typeof data.gridSize === \"number\" &&\r\n    data.tiles &&\r\n    data.tiles instanceof Array\r\n  ) {\r\n    baseGridSize = data.gridSize;\r\n    baseTiles = data.tiles;\r\n  }\r\n\r\n  return {\r\n    gridSize: baseGridSize,\r\n    tiles: baseTiles\r\n  };\r\n};\r\n","import \"./TilesLibrary.css\";\r\nimport React from \"react\";\r\nimport {\r\n  availableTiles as tiles,\r\n  tileToBgPosition\r\n} from \"providers/TilesService\";\r\n\r\nexport default function TilesLibrary({ selectedTile, onSelect }) {\r\n  return (\r\n    <div className=\"tiles-library\">\r\n      <h1>library</h1>\r\n      {tiles.map((tile, i) => (\r\n        <div\r\n          key={i}\r\n          className={`tile ${selectedTile === i ? \"selected\" : \"\"}`}\r\n          onClick={() => onSelect(i)}\r\n        >\r\n          <div\r\n            className=\"tile-img\"\r\n            style={{ backgroundPosition: tileToBgPosition(tile) }}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import \"./TilesView.css\";\r\nimport React from \"react\";\r\nimport { indexToBgPosition, indexToViewPosition } from \"providers/TilesService\";\r\n\r\nconst getTileIdxFromBtnEvent = ev =>\r\n  ev.target.hasAttribute(\"data-tile-idx\")\r\n    ? Number(ev.target.getAttribute(\"data-tile-idx\"))\r\n    : -1;\r\n\r\nexport default function TilesView({\r\n  tiles,\r\n  onLeftClick,\r\n  onRightClick,\r\n  gridSize = 6,\r\n  offsetX = 64 * gridSize,\r\n  offsetY = 0\r\n}) {\r\n  const handleClick = ev => {\r\n    const i = getTileIdxFromBtnEvent(ev);\r\n    if (i > -1) {\r\n      ev.preventDefault();\r\n      ev.stopPropagation();\r\n      if (ev.buttons === 1) {\r\n        onLeftClick(i);\r\n      } else if (ev.buttons === 2) {\r\n        onRightClick(i);\r\n      }\r\n    }\r\n  };\r\n  const handleMouseMove = ev => {\r\n    if (ev.buttons) {\r\n      handleClick(ev);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"tiles-view\" onMouseMove={handleMouseMove}>\r\n      {tiles.map((tile, i) => {\r\n        const { top, left } = indexToViewPosition(\r\n          i,\r\n          gridSize,\r\n          offsetX,\r\n          offsetY\r\n        );\r\n        return (\r\n          <div\r\n            key={i}\r\n            className=\"tile\"\r\n            style={{\r\n              backgroundPosition: indexToBgPosition(tile),\r\n              top,\r\n              left\r\n            }}\r\n          >\r\n            <div\r\n              className=\"tile-btn\"\r\n              data-tile-idx={i}\r\n              onMouseDown={handleClick}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import \"./TilesBuilder.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"components/Header\";\nimport TilesLibrary from \"components/TilesLibrary\";\nimport TilesView from \"components/TilesView\";\nimport {\n  createTiles,\n  updateGridSize,\n  loadStateFromHash\n} from \"providers/TilesService\";\nimport { debouce, saveToHash } from \"providers/utils\";\n\n//const hash = \"eyJncmlkU2l6ZSI6NiwidGlsZXMiOlswLDQ0LDQ0LDQ0LDQ0LDAsNDUsNzAsNjUsNjQsNDksNDMsNDUsNiwxLDYsNDksNDMsNDUsMzgsOCw0MCw0OSw0Myw0NSw2OSw2LDcxLDQ4LDQzLDAsNDIsNiw0Miw0MiwwXX0=\";\nconst { gridSize: baseGridSize, tiles: baseTiles } = loadStateFromHash(6);\n\nlet lastHash = \"\";\n\nexport default function TilesBuilder() {\n  const [gridSize, setGridSize] = useState(baseGridSize);\n  const [tiles, setTiles] = useState(baseTiles);\n  const [selectedTile, setSelectedTile] = useState(0);\n\n  useEffect(() => {\n    window.addEventListener(\"hashchange\", onHashChange);\n    return () => window.removeEventListener(\"hashchange\", onHashChange);\n  });\n\n  /**\n   * Utils\n   */\n  const updateHash = (delay = 500) =>\n    debouce(() => {\n      lastHash = saveToHash({ gridSize, tiles });\n    }, delay);\n  const onHashChange = ev => {\n    const newHash = new URL(ev.newURL).hash.substr(1);\n    if (lastHash !== newHash) {\n      lastHash = newHash;\n      handleLoadHash(newHash, false);\n    }\n  };\n  /**\n   * Header handlers\n   */\n  const handleLoadHash = (hash, doUpdate = true) => {\n    const { gridSize: newGridSize, tiles: newTiles } = loadStateFromHash(\n      gridSize,\n      tiles,\n      hash\n    );\n\n    // Update state\n    setGridSize(newGridSize);\n    setTiles(newTiles);\n    if (doUpdate) {\n      updateHash(0);\n    }\n  };\n  const handleGridSizeChange = ev => {\n    const newValue = Number(ev.target.value);\n    const newTiles = updateGridSize(gridSize, newValue, tiles);\n\n    // Update state\n    setGridSize(newValue);\n    setTiles(newTiles);\n    updateHash();\n  };\n  const randomize = () => {\n    setTiles(createTiles(gridSize));\n    updateHash(0);\n  };\n  const clear = () => {\n    setTiles(createTiles(gridSize, false));\n    updateHash(0);\n  };\n\n  /**\n   * Library handlers\n   */\n  const handleSelect = newSelection => {\n    if (newSelection !== selectedTile) {\n      setSelectedTile(newSelection);\n    }\n  };\n\n  /**\n   * View Handlers\n   */\n  const setTile = (tileIdx, tileType) => {\n    const newTiles = [...tiles];\n    newTiles[tileIdx] = tileType;\n    setTiles(newTiles);\n\n    updateHash();\n  };\n  const leftClick = tileIdx => setTile(tileIdx, selectedTile);\n  const rightClick = tileIdx => setTile(tileIdx, 0);\n\n  return (\n    <div className=\"tiles-builder\">\n      <Header\n        gridSize={gridSize}\n        onLoadHash={handleLoadHash}\n        onGridSizeChange={handleGridSizeChange}\n        onRandomize={randomize}\n        onClear={clear}\n      />\n      <TilesLibrary selectedTile={selectedTile} onSelect={handleSelect} />\n      <TilesView\n        tiles={tiles}\n        gridSize={gridSize}\n        onLeftClick={leftClick}\n        onRightClick={rightClick}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./styles.css\";\nimport TilesBuilder from \"components/TilesBuilder\";\nimport { ModalProvider } from \"components/common/Modal\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <ModalProvider>\n        <TilesBuilder />\n      </ModalProvider>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}